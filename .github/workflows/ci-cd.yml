name: CI/CD pipeline
on:
  push:
    branches: [main]
    paths-ignore:
        - 
  pull_request:
    branches: [main]

jobs:
    test:
      name: Unit Testing
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code             
          uses: actions/checkout@v4

        - name: Set Node.js                       #instaling node js and dependencies to run the application
          uses: actions/setup-node@v4
          with:
            node-version: '20'
            cache: 'npm'

        - name: Install dependencies
          run: npm ci
        
        - name: Run tests
          run: npm test || echo "Tests failed, but continuing to deploy"

    lint:
      name: Static Code Analysis
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'
            cache: 'npm'

        - name: Install dependencies
          run: npm ci

        - name: Run ESLint
          run: npm run lint

    build:
      name: Build application
      runs-on: ubuntu-latest
      needs: [test, lint]
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '20'
            cache: 'npm'

        - name: Install dependencies
          run: npm ci

        - name: Build application
          run: npm run build

        - name: upload build artifacts
          uses: actions/upload-artifact@v4
          with:
            name: build-artifacts
            path: dist/

    Docker:
      name: Docker build and push
      runs-on: ubuntu-latest
      needs: [build]
      env: 
        REGISTRY: ghcr.io                           # docker registry
        IMAGE_NAME: ${{ github.repository }}
      outputs:
        image_tag: ${{ steps.set_output.outputs.image_tag }}              # output the image tag
      steps:
        - name: Checkout code                       # checkout the code
          uses: actions/checkout@v4
        
        - name: Download artifacts                 # download the build artifacts
          uses: actions/download-artifact@v4
          with:
            name: build-artifacts
            path: dist/
        - name: setup Docker Buildx                   # setup docker buildx
          uses: docker/setup-buildx-action@v2
        
        -  name: Login to Docker registry            # login to the docker registry
           uses: docker/login-action@v4
           with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.TOKEN }}

        - name: Extract metadata for Docker            # tags for the docker image
          id: meta
          uses: docker/metadata-action@v5
          with:
                images: ${{env.REGISTRY}}/${{ env.IMAGE_NAME }}
                tags: |   
                 type=sha
                 type=ref,event=branch
                 latest
        
        - name: Build Docker image
          uses: docker/build-push-action@v5
          with:
            context: .                                 # context for the docker image
            push: false                              
            tags: ${{ steps.meta.outputs.tags }}      # tags for the image
            labels: ${{ steps.meta.outputs.labels }}  # labels for the image
            load: true                            # load the image into the docker daemon
        
        - name: Run Trivy vaulnerability scan
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
            format: 'table'                            # format of the output
            exit-code: '1'                            # exit code for the action
            ignore-unfixed: true                       # ignore unfixed vulnerabilities
            severity: 'CRITICAL,HIGH,MEDIUM'          # severity of the vulnerabilities to scan for
            vuln-type: 'os,library'                   # type of vulnerabilities to scan for

        - name: Push Docker image
          uses: docker/build-push-action@v5
          with:
            context: .                                 # context for the docker image
            push: true                                # push the image to the registry
            tags: ${{ steps.meta.outputs.tags }}      # tags for the image
            labels: ${{ steps.meta.outputs.labels }}  # labels for the image

        - name: Set output
          id: set_output
          run: echo "image_tag=ghcr.io/${{ github.repository }}:sha-${{ github.sha }}" >> $GITHUB_ENV